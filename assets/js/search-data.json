{
  
    
        "post0": {
            "title": "Weber's Potential",
            "content": "from sympy import * . $ displaystyle frac{d}{d t} r{ left(t right)}$ from sympy import * t=symbols(&#39;t&#39;) m=symbols(&#39;m&#39;) r=Function(&#39;r&#39;)(t) U=Function(&#39;U&#39;)(r,t) F=Function(&#39;F&#39;)(r,t) U=(r**-1)*(1-(r.diff(t))**2/2) F=(-1)*(U.diff(t))*((r.diff(t))**-1) pprint(simplify(U)) print() pprint(simplify(F)) . 2 ⎛d ⎞ 2 - ⎜──(r(t))⎟ ⎝dt ⎠ ─────────────── 2⋅r(t) 2 ⎛d ⎞ 2 ⎜──(r(t))⎟ d ⎝dt ⎠ r(t)⋅───(r(t)) - ─────────── + 1 2 2 dt ──────────────────────────────── 2 r (t) . import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # make sure everything is SI #q = 1.602176634E-19 # charge assuming it is a proton #B = 4 # magnetic field magnitude #m = 2E-27 # mass #E = 2 * 1.60218E-13 # kinetic energy in joules #C = q * B / m # constant for convenience v0 = -0.1 r0= 1 initial = [1.0,-0.1] ## good initial [position, velocity] since we see the conservation of energy, ## i.e. the solution will have initial velocity, and most of the energy being contained in the kinetic energy. ## therefore if particle enters from afar with a given velocity, then the particle either stays confined within the potential energy, ## or the particle exits the potential and exits with the same velocity but possibly in another direction. def ivf(t, Z) : # Z=[position, velocity]=[r,v] m=1 a1=Z[0]**-2 a2=(m-(Z[0]**-1)) a3=(1-(Z[1]**2)/2) dvdt = a1*(a2**-1)*a3 drdt= Z[1] return [drdt, dvdt] sol = solve_ivp(ivf, [0, 10], [0.9, .8], method=&#39;LSODA&#39;) #t_eval=[10,20,30,40,50, 60, 70, 80,90]) print(sol) plt.plot(sol.y[0], sol.y[1]) plt.xlabel(&#39;r&#39;) plt.ylabel(&#39;v&#39;) plt.title(&#39;&#39;) plt.show() . message: &#39;The solver successfully reached the end of the integration interval.&#39; nfev: 120 njev: 8 nlu: 8 sol: None status: 0 success: True t: array([0.00000000e+00, 3.35229098e-03, 6.70458196e-03, 1.94530094e-02, 3.22014368e-02, 4.49498643e-02, 5.35130409e-02, 5.98814923e-02, 6.47314000e-02, 6.78437169e-02, 7.09560339e-02, 7.40683508e-02, 8.02929846e-02, 8.65176185e-02, 9.27422523e-02, 9.89668861e-02, 1.14037343e-01, 1.29107800e-01, 1.44178257e-01, 1.59248714e-01, 1.74319171e-01, 2.00424415e-01, 2.26529658e-01, 2.52634902e-01, 2.78740146e-01, 3.18247720e-01, 3.57755294e-01, 3.97262869e-01, 4.36770443e-01, 5.13664401e-01, 5.90558360e-01, 6.67452318e-01, 7.44346277e-01, 7.83159942e-01, 8.69723913e-01, 9.56287884e-01, 1.04285186e+00, 1.19028003e+00, 1.33770821e+00, 1.48513638e+00, 1.73472681e+00, 1.98431724e+00, 2.23390766e+00, 2.63886616e+00, 3.04382466e+00, 3.44878316e+00, 4.16621704e+00, 4.88365092e+00, 5.60108481e+00, 6.95449579e+00, 8.30790677e+00, 9.66131775e+00, 1.00000000e+01]) t_events: None y: array([[ 0.9 , 0.90259229, 0.90509007, 0.91383224, 0.92090985, 0.9260233 , 0.92822526, 0.92917131, 0.92948294, 0.92949447, 0.92935839, 0.92907524, 0.92807275, 0.92650281, 0.92438925, 0.92176188, 0.91348038, 0.90289548, 0.89048335, 0.87662885, 0.86163587, 0.83362006, 0.80371774, 0.7724672 , 0.74020934, 0.68997183, 0.6384998 , 0.58611011, 0.53301903, 0.42820645, 0.32203009, 0.21485108, 0.10691232, 0.05220351, -0.07037184, -0.19357688, -0.31734323, -0.52916444, -0.7420834 , -0.95587531, -1.31926128, -1.68412381, -2.05010436, -2.64556815, -3.24266976, -3.84098546, -4.90298538, -5.96701829, -7.03251589, -9.04510465, -11.06031729, -13.07735319, -13.58235772], [ 0.8 , 0.77326992, 0.74507662, 0.62639603, 0.48405165, 0.31844992, 0.19609174, 0.10108368, 0.02744365, -0.02002997, -0.06742023, -0.11453067, -0.20723089, -0.29665275, -0.38171281, -0.46160976, -0.63128718, -0.76765812, -0.87535742, -0.96010413, -1.02716676, -1.1131846 , -1.17377275, -1.21813511, -1.25167296, -1.28880224, -1.31561181, -1.33571826, -1.35128419, -1.37309312, -1.38837835, -1.39953996, -1.40792274, -1.41138556, -1.41965518, -1.42692028, -1.43300964, -1.44141949, -1.44794461, -1.4531034 , -1.45984805, -1.46480304, -1.46856418, -1.47318234, -1.47649824, -1.47897318, -1.48225477, -1.48452623, -1.48617171, -1.48845083, -1.48995731, -1.49100869, -1.49120967]]) y_events: None . (sol.y[0], sol.y[1]) . (array([1.00000000e+00, 9.43322627e-01, 3.76793254e-01, 9.42046536e-02, 3.81852881e-02, 3.26377040e-02, 2.71140479e-02, 2.16257607e-02, 1.70140820e-02, 1.53381082e-02, 1.25774416e-02, 9.86516920e-03, 7.78632096e-03, 5.09993582e-03, 4.36254373e-03, 3.42446355e-03, 2.72300277e-03, 2.59184659e-03, 2.50525583e-03, 2.46838925e-03, 2.52855629e-03, 2.74079751e-03, 3.07225357e-03, 3.78716648e-03, 4.88265158e-03, 6.08803528e-03, 8.09041438e-03, 1.09618514e-02, 1.52424781e-02, 2.13902745e-02, 3.18119371e-02, 4.86618201e-02, 7.72762163e-02, 1.27525570e-01, 2.17520121e-01, 3.70294192e-01, 7.15360286e-01, 1.44147206e+00, 3.14149144e+00, 7.42308457e+00, 1.83482297e+01, 4.40025970e+01]), array([-0.9 , -0.89996024, -0.89889624, -0.89329756, -0.88240754, -0.87922385, -0.8746901 , -0.86773475, -0.85811274, -0.8530393 , -0.84136552, -0.82247504, -0.79709916, -0.72147277, -0.67594813, -0.56572672, -0.34687072, -0.25188089, -0.14304692, -0.02498378, 0.18029864, 0.35689647, 0.48647593, 0.61958089, 0.7101289 , 0.75950867, 0.80178538, 0.83137132, 0.85267331, 0.86731223, 0.87861213, 0.88634357, 0.89160596, 0.89504913, 0.8972219 , 0.89848704, 0.89935152, 0.89981735, 0.90006453, 0.90017035, 0.9002231 , 0.90024401])) . from sympy import * t=symbols(&#39;t&#39;) m=symbols(&#39;m&#39;) r=Function(&#39;r&#39;)(t) U=Function(&#39;U&#39;)(r,t) F=Function(&#39;F&#39;)(r,t) U=(r**-1)*sqrt(1-r.diff(t)) F=(-1)*(U.diff(t))*((r.diff(t))**-1) pprint(simplify(U)) print() pprint(simplify(F)) . ______________ ╱ d ╱ 1 - ──(r(t)) ╲╱ dt ────────────────── r(t) 2 d r(t)⋅───(r(t)) 2 ⎛ d ⎞ d dt ⎜1 - ──(r(t))⎟⋅──(r(t)) + ────────────── ⎝ dt ⎠ dt 2 ──────────────────────────────────────── ______________ ╱ d 2 d ╱ 1 - ──(r(t)) ⋅r (t)⋅──(r(t)) ╲╱ dt dt . import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt v0 = -0.1 r0= 1 initial = [r0,v0] def ivf(t, Z) : # Z=[position, velocity]=[r,v] A=(Z[0]**2)*(sqrt(1-Z[1]))*((1-Z[1])**-1) B=Z[0]*(( 2*Z[1]*(1-Z[1]) )**-1) dvdt = (A+B)**-1 drdt= Z[1] return [drdt, dvdt] sol = solve_ivp(ivf, [0, 100], [0.1, -0.8], method=&#39;LSODA&#39;) print(sol) plt.plot(sol.y[0], sol.y[1]) plt.xlabel(&#39;r&#39;) plt.ylabel(&#39;v&#39;) plt.title(&#39;Two Body System of Equal Charges and Equal Mass w.r.t. Phipps Potential&#39;) plt.show() . TypeError Traceback (most recent call last) &lt;ipython-input-36-f42339f7f019&gt; in &lt;module&gt;() 19 20 sol = solve_ivp(ivf, [0, 100], [0.1, -0.8], &gt; 21 method=&#39;LSODA&#39;) 22 23 print(sol) /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/ivp.py in solve_ivp(fun, t_span, y0, method, t_eval, dense_output, events, vectorized, args, **options) 575 status = None 576 while status is None: --&gt; 577 message = solver.step() 578 579 if solver.status == &#39;finished&#39;: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in step(self) 180 else: 181 t = self.t --&gt; 182 success, message = self._step_impl() 183 184 if not success: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/lsoda.py in _step_impl(self) 148 solver._y, solver.t = integrator.run( 149 solver.f, solver.jac or (lambda: None), solver._y, solver.t, --&gt; 150 self.t_bound, solver.f_params, solver.jac_params) 151 integrator.call_args[2] = itask 152 /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ode.py in run(self, f, jac, y0, t0, t1, f_params, jac_params) 1341 args = [f, y0, t0, t1] + self.call_args[:-1] + 1342 [jac, self.call_args[-1], f_params, 0, jac_params] -&gt; 1343 y1, t, istate = self.runner(*args) 1344 self.istate = istate 1345 if istate &lt; 0: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in fun(t, y) 137 def fun(t, y): 138 self.nfev += 1 --&gt; 139 return self.fun_single(t, y) 140 141 self.fun = fun /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in fun_wrapped(t, y) 19 20 def fun_wrapped(t, y): &gt; 21 return np.asarray(fun(t, y), dtype=dtype) 22 23 return fun_wrapped, y0 /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py in asarray(a, dtype, order) 81 82 &#34;&#34;&#34; &gt; 83 return array(a, dtype, copy=False, order=order) 84 85 /usr/local/lib/python3.7/dist-packages/sympy/core/expr.py in __float__(self) 347 return float(result) 348 if result.is_number and result.as_real_imag()[1]: --&gt; 349 raise TypeError(&#34;can&#39;t convert complex to float&#34;) 350 raise TypeError(&#34;can&#39;t convert expression to float&#34;) 351 TypeError: can&#39;t convert complex to float . import numpy as np import matplotlib.pyplot as plt from mpl_toolkits import mplot3d def plot_surface(domain, fn, grid_samples=100, title=None, **plot_kwargs): x = np.linspace(domain[0][0], domain[0][1], grid_samples) y = np.linspace(domain[1][0], domain[1][1], grid_samples) X, Y = np.meshgrid(x, y) fn_vectorized = np.vectorize(fn) Z = fn_vectorized(X, Y) fig = plt.figure(figsize=(20,10)) ax = plt.axes(projection=&quot;3d&quot;) ax.plot_surface(X, Y, Z, **plot_kwargs) ax.set(xlabel=&quot;x&quot;, ylabel=&quot;y&quot;, zlabel=&quot;f(x, y)&quot;, title=title) plt.close() return fig, ax # now let&#39;s try it out! def func(r, v): return (r**-1)*(1-v**2/2) domain = [(-10, 10), (-1, +1)] fig, ax = plot_surface(domain, func, rstride=1, cstride=1, cmap=&#39;terrain&#39;, edgecolor=None) fig .",
            "url": "https://jhmartel.github.io/fp/2022/02/10/_02_08_Weber_Potential_1.html",
            "relUrl": "/2022/02/10/_02_08_Weber_Potential_1.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Letter To Prof. Assis on Weber, Conservation of Energy.",
            "content": "import numpy as np from scipy.integrate import odeint, solve_ivp import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D m=0.5 ## mass of second test particle c=1.0 ## speed of light constant in Weber&#39;s potential ## Kinetic Energy: we use the naive expression for vis viva. Is it correct? def T(vx, vy, vz): return m*(vx*vx+vy*vy+vz*vz)/2 ## Weber Potential Energy def U(x,y,z,vx,vy,vz): r=(x*x + y*y + z*z)**0.5 rdot=(x*vx+y*vy+z*vz)/r return (r**-2)*(1-(rdot**2)/2) ## Integrating equations of motion relative Weber&#39;s Force Law. ## I think I have implemented everything correctly. The formula for rdot is from Relational Mechanics, pp.168 ## but perhaps I have the wrong formula for r&#39;&#39; and have not applied Newtons second law F=mr&#39;&#39; correctly? def weber(t, state): x, y, z, vx, vy, vz = state r=(x*x + y*y + z*z)**0.5 rdot=(x*vx+y*vy+z*vz)/r A=r**-2 B=1-(rdot*rdot)/2 C=(m-((c*c*r)**-1))**-1 dxdt = vx dydt = vy dzdt = vz dvxdt = (x/r)*A*B*C dvydt = (y/r)*A*B*C dvzdt = (z/r)*A*B*C return [dxdt, dydt, dzdt, dvxdt, dvydt, dvzdt] t_span = (0.0, 40.0) t = np.arange(0.0, 40.0, 0.001) y0=[0, 1.2, 0, 0, -0.4, .1] ## initial state of the system y0=[x, y, z, vx, vy, vz] result = odeint(weber, y0, t, tfirst=True) Energy=T(y0[3], y0[4], y0[5] ) + U(y0[0],y0[1],y0[2],y0[3],y0[4],y0[5]) print(&#39;The initial total energy T+U is equal to:&#39;, Energy) print(&#39;The luminal energy is:&#39;, m*c*c/2) print(&#39;The energy is subliminal:&#39;, Energy &lt; m*c**2 /2) r=(y0[0]*y0[0] + y0[1]*y0[1] + y0[2]*y0[2])**0.5 print(&#39;Webers critical radius is equal to:&#39;,(m*c*c)**-1) print(&#39;The initial radius r is within the Weber critical distance:&#39;, r &lt; (m*c*c)**-1 ) fig = plt.figure() ax = fig.add_subplot(1, 2, 1, projection=&#39;3d&#39;) ax.plot(result[:, 0], result[:, 1], result[:, 2]) ax.set_title(&quot;position&quot;) ax = fig.add_subplot(1, 2, 2, projection=&#39;3d&#39;) ax.plot(result[:, 3], result[:, 4], result[:, 5]) ax.set_title(&quot;velocity&quot;) . The initial total energy T+U is equal to: 0.6813888888888889 The luminal energy is: 0.25 The energy is subliminal: False Webers critical radius is equal to: 2.0 The initial radius r is within the Weber critical distance: True . Text(0.5, 0.92, &#39;velocity&#39;) . import matplotlib.pyplot import pylab def rho(x,y,z): return (x*x+y*y+z*z)**0.5 #v_list=[] #for j in range(400): # v_list.append( # (rho(result[j,0], result[j,1], result[j,2]), # T(result[j,3], result[j,4], result[j,5])) # ) U_list=[] for j in range(4000): U_list.append( (rho(result[j,0], result[j,1], result[j,2]), U(result[j,0],result[j,1],result[j,2],result[j,3],result[j,4],result[j,5])+T(result[j,3], result[j,4], result[j,5])) ) #prelist1 = list(zip(*v_list)) #pylab.scatter(list(prelist1[0]),list(prelist1[1])) #pylab.show() prelist2 = list(zip(*U_list)) pylab.scatter(list(prelist2[0]),list(prelist2[1])) pylab.show() ## Error. Expect to see conservation of energy T+U = constant in the second figure. However the sum T+U appears nonconstant. . The horizontal axis is the radial distance $r$ from the origin, and the vertical axis is the energy value. We expect the second figure to be a horizontal straight line. It does appear basically flat except for blow-up behaviour at small distance. . Is this loss/gain of energy a defect from the odeint routine? In otherwords, is energy not conserved because of cumulative errors and approximations in the solution? . for j in range(50): print( U(result[j,0],result[j,1],result[j,2],result[j,3],result[j,4],result[j,5]) + T(result[j,3], result[j,4], result[j,5]) ) . 0.6813888888888889 0.6816686557880371 0.681949621710001 0.6822317838657116 0.6825151392305971 0.6827996855209162 0.6830854196454909 0.6833723386355962 0.6836604395334028 0.683949719392233 0.6842401752768086 0.6845318042635065 0.6848246035540551 0.6851185704066922 0.6854137019862019 0.685709995468147 0.6860074480391548 0.6863060568971592 0.6866058192516452 0.6869067322696227 0.6872087929447325 0.6875119984287184 0.6878163459034037 0.6881218325625335 0.6884284556120147 0.6887362122701597 0.6890450987325789 0.6893551145542436 0.6896662551800113 0.6899785178581948 0.6902918998406629 0.6906063983829406 0.6909220107443118 0.6912387341879169 0.6915565658811931 0.6918755029226542 0.6921955425346311 0.6925166819411264 0.6928389183668257 0.6931622490371347 0.6934866711782177 0.6938121820170333 0.6941387787813703 0.6944664586998799 0.6947952190021067 0.69512505691852 0.6954559696805385 0.695787954520561 0.6961210086719865 0.6964551293982145 .",
            "url": "https://jhmartel.github.io/fp/2022/02/10/LetterToAssisWeberPotentials.html",
            "relUrl": "/2022/02/10/LetterToAssisWeberPotentials.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Weber's Potential",
            "content": "&gt; &quot;Examining Weber&#39;s interaction energy U with python.&quot; - toc: false - branch: master - badges: true - comments: true - categories: [fastpages, jupyter] - image: images/some_folder/your_image.png - hide: false - search_exclude: true - metadata_key1: metadata_value1 - metadata_key2: metadata_value2 . File &#34;&lt;ipython-input-37-71c62dbdabc2&gt;&#34;, line 2 &gt; &#34;Examining Weber&#39;s interaction energy U with python.&#34; ^ SyntaxError: invalid syntax . from sympy import * t=symbols(&#39;t&#39;) m=symbols(&#39;m&#39;) r=Function(&#39;r&#39;)(t) U=Function(&#39;U&#39;)(r,t) F=Function(&#39;F&#39;)(r,t) U=(r**-1)*(1-(r.diff(t))**2/2) F=(-1)*(U.diff(t))*((r.diff(t))**-1) pprint(simplify(U)) print() pprint(simplify(F)) . 2 ⎛d ⎞ 2 - ⎜──(r(t))⎟ ⎝dt ⎠ ─────────────── 2⋅r(t) 2 ⎛d ⎞ 2 ⎜──(r(t))⎟ d ⎝dt ⎠ r(t)⋅───(r(t)) - ─────────── + 1 2 2 dt ──────────────────────────────── 2 r (t) . import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # make sure everything is SI #q = 1.602176634E-19 # charge assuming it is a proton #B = 4 # magnetic field magnitude #m = 2E-27 # mass #E = 2 * 1.60218E-13 # kinetic energy in joules #C = q * B / m # constant for convenience v0 = -0.1 r0= 1 initial = [1.0,-0.1] ## good initial [position, velocity] since we see the conservation of energy, ## i.e. the solution will have initial velocity, and most of the energy being contained in the kinetic energy. ## therefore if particle enters from afar with a given velocity, then the particle either stays confined within the potential energy, ## or the particle exits the potential and exits with the same velocity but possibly in another direction. def ivf(t, Z) : # Z=[position, velocity]=[r,v] m=1 a1=Z[0]**-2 a2=(m-(Z[0]**-1)) a3=(1-(Z[1]**2)/2) dvdt = a1*(a2**-1)*a3 drdt= Z[1] return [drdt, dvdt] sol = solve_ivp(ivf, [0, 10], [0.9, .8], method=&#39;LSODA&#39;) #t_eval=[10,20,30,40,50, 60, 70, 80,90]) print(sol) plt.plot(sol.y[0], sol.y[1]) plt.xlabel(&#39;r&#39;) plt.ylabel(&#39;v&#39;) plt.title(&#39;&#39;) plt.show() . message: &#39;The solver successfully reached the end of the integration interval.&#39; nfev: 120 njev: 8 nlu: 8 sol: None status: 0 success: True t: array([0.00000000e+00, 3.35229098e-03, 6.70458196e-03, 1.94530094e-02, 3.22014368e-02, 4.49498643e-02, 5.35130409e-02, 5.98814923e-02, 6.47314000e-02, 6.78437169e-02, 7.09560339e-02, 7.40683508e-02, 8.02929846e-02, 8.65176185e-02, 9.27422523e-02, 9.89668861e-02, 1.14037343e-01, 1.29107800e-01, 1.44178257e-01, 1.59248714e-01, 1.74319171e-01, 2.00424415e-01, 2.26529658e-01, 2.52634902e-01, 2.78740146e-01, 3.18247720e-01, 3.57755294e-01, 3.97262869e-01, 4.36770443e-01, 5.13664401e-01, 5.90558360e-01, 6.67452318e-01, 7.44346277e-01, 7.83159942e-01, 8.69723913e-01, 9.56287884e-01, 1.04285186e+00, 1.19028003e+00, 1.33770821e+00, 1.48513638e+00, 1.73472681e+00, 1.98431724e+00, 2.23390766e+00, 2.63886616e+00, 3.04382466e+00, 3.44878316e+00, 4.16621704e+00, 4.88365092e+00, 5.60108481e+00, 6.95449579e+00, 8.30790677e+00, 9.66131775e+00, 1.00000000e+01]) t_events: None y: array([[ 0.9 , 0.90259229, 0.90509007, 0.91383224, 0.92090985, 0.9260233 , 0.92822526, 0.92917131, 0.92948294, 0.92949447, 0.92935839, 0.92907524, 0.92807275, 0.92650281, 0.92438925, 0.92176188, 0.91348038, 0.90289548, 0.89048335, 0.87662885, 0.86163587, 0.83362006, 0.80371774, 0.7724672 , 0.74020934, 0.68997183, 0.6384998 , 0.58611011, 0.53301903, 0.42820645, 0.32203009, 0.21485108, 0.10691232, 0.05220351, -0.07037184, -0.19357688, -0.31734323, -0.52916444, -0.7420834 , -0.95587531, -1.31926128, -1.68412381, -2.05010436, -2.64556815, -3.24266976, -3.84098546, -4.90298538, -5.96701829, -7.03251589, -9.04510465, -11.06031729, -13.07735319, -13.58235772], [ 0.8 , 0.77326992, 0.74507662, 0.62639603, 0.48405165, 0.31844992, 0.19609174, 0.10108368, 0.02744365, -0.02002997, -0.06742023, -0.11453067, -0.20723089, -0.29665275, -0.38171281, -0.46160976, -0.63128718, -0.76765812, -0.87535742, -0.96010413, -1.02716676, -1.1131846 , -1.17377275, -1.21813511, -1.25167296, -1.28880224, -1.31561181, -1.33571826, -1.35128419, -1.37309312, -1.38837835, -1.39953996, -1.40792274, -1.41138556, -1.41965518, -1.42692028, -1.43300964, -1.44141949, -1.44794461, -1.4531034 , -1.45984805, -1.46480304, -1.46856418, -1.47318234, -1.47649824, -1.47897318, -1.48225477, -1.48452623, -1.48617171, -1.48845083, -1.48995731, -1.49100869, -1.49120967]]) y_events: None . (sol.y[0], sol.y[1]) . (array([1.00000000e+00, 9.43322627e-01, 3.76793254e-01, 9.42046536e-02, 3.81852881e-02, 3.26377040e-02, 2.71140479e-02, 2.16257607e-02, 1.70140820e-02, 1.53381082e-02, 1.25774416e-02, 9.86516920e-03, 7.78632096e-03, 5.09993582e-03, 4.36254373e-03, 3.42446355e-03, 2.72300277e-03, 2.59184659e-03, 2.50525583e-03, 2.46838925e-03, 2.52855629e-03, 2.74079751e-03, 3.07225357e-03, 3.78716648e-03, 4.88265158e-03, 6.08803528e-03, 8.09041438e-03, 1.09618514e-02, 1.52424781e-02, 2.13902745e-02, 3.18119371e-02, 4.86618201e-02, 7.72762163e-02, 1.27525570e-01, 2.17520121e-01, 3.70294192e-01, 7.15360286e-01, 1.44147206e+00, 3.14149144e+00, 7.42308457e+00, 1.83482297e+01, 4.40025970e+01]), array([-0.9 , -0.89996024, -0.89889624, -0.89329756, -0.88240754, -0.87922385, -0.8746901 , -0.86773475, -0.85811274, -0.8530393 , -0.84136552, -0.82247504, -0.79709916, -0.72147277, -0.67594813, -0.56572672, -0.34687072, -0.25188089, -0.14304692, -0.02498378, 0.18029864, 0.35689647, 0.48647593, 0.61958089, 0.7101289 , 0.75950867, 0.80178538, 0.83137132, 0.85267331, 0.86731223, 0.87861213, 0.88634357, 0.89160596, 0.89504913, 0.8972219 , 0.89848704, 0.89935152, 0.89981735, 0.90006453, 0.90017035, 0.9002231 , 0.90024401])) . from sympy import * t=symbols(&#39;t&#39;) m=symbols(&#39;m&#39;) r=Function(&#39;r&#39;)(t) U=Function(&#39;U&#39;)(r,t) F=Function(&#39;F&#39;)(r,t) U=(r**-1)*sqrt(1-r.diff(t)) F=(-1)*(U.diff(t))*((r.diff(t))**-1) pprint(simplify(U)) print() pprint(simplify(F)) . ______________ ╱ d ╱ 1 - ──(r(t)) ╲╱ dt ────────────────── r(t) 2 d r(t)⋅───(r(t)) 2 ⎛ d ⎞ d dt ⎜1 - ──(r(t))⎟⋅──(r(t)) + ────────────── ⎝ dt ⎠ dt 2 ──────────────────────────────────────── ______________ ╱ d 2 d ╱ 1 - ──(r(t)) ⋅r (t)⋅──(r(t)) ╲╱ dt dt . import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt v0 = -0.1 r0= 1 initial = [r0,v0] def ivf(t, Z) : # Z=[position, velocity]=[r,v] A=(Z[0]**2)*(sqrt(1-Z[1]))*((1-Z[1])**-1) B=Z[0]*(( 2*Z[1]*(1-Z[1]) )**-1) dvdt = (A+B)**-1 drdt= Z[1] return [drdt, dvdt] sol = solve_ivp(ivf, [0, 100], [0.1, -0.8], method=&#39;LSODA&#39;) print(sol) plt.plot(sol.y[0], sol.y[1]) plt.xlabel(&#39;r&#39;) plt.ylabel(&#39;v&#39;) plt.title(&#39;Two Body System of Equal Charges and Equal Mass w.r.t. Phipps Potential&#39;) plt.show() . TypeError Traceback (most recent call last) &lt;ipython-input-36-f42339f7f019&gt; in &lt;module&gt;() 19 20 sol = solve_ivp(ivf, [0, 100], [0.1, -0.8], &gt; 21 method=&#39;LSODA&#39;) 22 23 print(sol) /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/ivp.py in solve_ivp(fun, t_span, y0, method, t_eval, dense_output, events, vectorized, args, **options) 575 status = None 576 while status is None: --&gt; 577 message = solver.step() 578 579 if solver.status == &#39;finished&#39;: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in step(self) 180 else: 181 t = self.t --&gt; 182 success, message = self._step_impl() 183 184 if not success: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/lsoda.py in _step_impl(self) 148 solver._y, solver.t = integrator.run( 149 solver.f, solver.jac or (lambda: None), solver._y, solver.t, --&gt; 150 self.t_bound, solver.f_params, solver.jac_params) 151 integrator.call_args[2] = itask 152 /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ode.py in run(self, f, jac, y0, t0, t1, f_params, jac_params) 1341 args = [f, y0, t0, t1] + self.call_args[:-1] + 1342 [jac, self.call_args[-1], f_params, 0, jac_params] -&gt; 1343 y1, t, istate = self.runner(*args) 1344 self.istate = istate 1345 if istate &lt; 0: /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in fun(t, y) 137 def fun(t, y): 138 self.nfev += 1 --&gt; 139 return self.fun_single(t, y) 140 141 self.fun = fun /usr/local/lib/python3.7/dist-packages/scipy/integrate/_ivp/base.py in fun_wrapped(t, y) 19 20 def fun_wrapped(t, y): &gt; 21 return np.asarray(fun(t, y), dtype=dtype) 22 23 return fun_wrapped, y0 /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py in asarray(a, dtype, order) 81 82 &#34;&#34;&#34; &gt; 83 return array(a, dtype, copy=False, order=order) 84 85 /usr/local/lib/python3.7/dist-packages/sympy/core/expr.py in __float__(self) 347 return float(result) 348 if result.is_number and result.as_real_imag()[1]: --&gt; 349 raise TypeError(&#34;can&#39;t convert complex to float&#34;) 350 raise TypeError(&#34;can&#39;t convert expression to float&#34;) 351 TypeError: can&#39;t convert complex to float . import numpy as np import matplotlib.pyplot as plt from mpl_toolkits import mplot3d def plot_surface(domain, fn, grid_samples=100, title=None, **plot_kwargs): x = np.linspace(domain[0][0], domain[0][1], grid_samples) y = np.linspace(domain[1][0], domain[1][1], grid_samples) X, Y = np.meshgrid(x, y) fn_vectorized = np.vectorize(fn) Z = fn_vectorized(X, Y) fig = plt.figure(figsize=(20,10)) ax = plt.axes(projection=&quot;3d&quot;) ax.plot_surface(X, Y, Z, **plot_kwargs) ax.set(xlabel=&quot;x&quot;, ylabel=&quot;y&quot;, zlabel=&quot;f(x, y)&quot;, title=title) plt.close() return fig, ax # now let&#39;s try it out! def func(r, v): return (r**-1)*(1-v**2/2) domain = [(-10, 10), (-1, +1)] fig, ax = plot_surface(domain, func, rstride=1, cstride=1, cmap=&#39;terrain&#39;, edgecolor=None) fig .",
            "url": "https://jhmartel.github.io/fp/2022/02/08/Weber_Potential_1.html",
            "relUrl": "/2022/02/08/Weber_Potential_1.html",
            "date": " • Feb 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "!pip install curver ## need install curver package. . import curver ## we load the mapping class group of genus two with one puncture ## S=curver.load(2,1) ## Below are the standard generators in Lickorish presentation, following Bell, Margalit, etc.. ## Id=S(&#39;&#39;) a=S(&#39;a_0&#39;) A=a**-1 b=S(&#39;a_1&#39;) B=b**-1 c=S(&#39;c_0&#39;) C=c**-1 d=S(&#39;d_1&#39;) D=d**-1 e=S(&#39;b_0&#39;) E=e**-1 f=S(&#39;b_1&#39;) F=f**-1 ## Ad is the adjoint action ## which replaces w2 by the w1-conjugate. def Ad(w1, w2): return w1*w2*(w1**-1) ## Translate is used to compute the adjoint action ## on a collection of curves, i.e. the pants p. def Translate(x, p): return {Ad(x,w) for w in p} ## br stands for &quot;bracket&quot; like &quot;commutator bracket&quot;. ## Thus br(x,y)=[x,y]=xyx^{-1} y^{1} in the usual group-theoretic notation def br(x,y): return Ad(x,y)*(y**-1) pant={a,b,c} zeta=a*e*c*f*b ## zeta is the order 6 element in MCG arising from chain relation. ## nu=a*e*c*f ## nu is order 10 element in MCG mu=nu**4 ## mu is order 5 element in MCG. ## The following code shows that pant and mu.pant are &quot;dual&quot; pants. #for x in pant: # for y in Translate(mu, pant): # if br(x,y)==Id: # print(&quot;The elements commute! And the curves are disjoint!&quot; ) # if br(x,y)!=Id: # print(&quot;The elements are NONcommuting. Now evaluating dual relation:&quot;, x*y*x==y*x*y) # else: pass ## xi is the steinberg symbol in our case. ## xi is obtained by joining the initial pant p with its mu translate. xi=pant|Translate(mu, pant) ## We need verify that the mu-translate of p is &quot;dual&quot; to p ## in the appropriate intersection-theoretic sense. This duality ## is nonstandard definition. #print(xi) ## important to verify that pant and the mu-translate are disjoint. ## Ad(mu,pant) is &quot;opposite pair of pants&quot; print(&quot;The mu translate of the standard pant is disjoint from pant. &quot;, pant &amp; Translate(mu, pant) == set()) print() ## Now translate the symbol xi by the powers of mu. ## The translates are not disjoint, good!, that means there is cancellation in the symmetric difference. print(&quot;The Steinberg symbol in our calculation is xi, and is the sum of the standard pant with its mu translate.&quot;) print() M0=xi M1=Translate(mu,xi) M2=Translate(mu**2,xi) M3=Translate(mu**3,xi) M4=Translate(mu**4,xi) ## The following proves that all the symbol translates are nontrivial, and there is no complete coincidence ## between the translated symbols. print(&quot;The mu translates of xi are all pairwise distinct:&quot;, M0!=M1 and M0!=M2 and M0!=M3 and M0!=M4 and M1!=M2 and M1!=M3 and M1!=M4 and M2!=M3 and M2!=M4 and M3!=M4 ) print() ## The following proves that the total chain sum of the translated symbols vanishes mod 2. ## I.e. the iterated symmetric difference of the translated symbols is equal to empty set. print(&quot;The iterated symmetric difference of the mu translates is empty.&quot;, ((((M0^M1))^M2)^M3)^M4 ==set()) print() print(&quot;The mu-orbit of xi is supported on ten curves.&quot;, 10==len(M0|M1|M2|M3|M4) ) print() print(&quot;Therefore we find I={Id, mu, mu**2, mu**3, mu**4} is a formal solution to Closing the Steinberg symbol xi in genus two.&quot;) print(&quot;&quot;) . The mu translate of the standard pant is disjoint from pant. True The Steinberg symbol in our calculation is xi, and is the sum of the standard pant with its mu translate. The mu translates of xi are all pairwise distinct: True The iterated symmetric difference of the mu translates is empty. True The mu-orbit of xi is supported on ten curves. True Therefore we find I={Id, mu, mu**2, mu**3, mu**4} is a formal solution to Closing the Steinberg symbol xi in genus two. . B0=M0|M1|M2|M3|M4 gen=(Id, a, A, b, B, c, C, d, D, e, E, f, F) gen1=(x*y for x in gen for y in gen) sample1=set(gen)|set(gen1) gen2=(x*y for x in gen for y in sample1) sample2=sample1|set(gen2) # gen3=(x*y for x in gen for y in gen2) #len(set(gen3)) len(sample2) #for word in gen1: # print( len(Translate(word, B0) &amp; B0)) . 105 . )B**-1 .",
            "url": "https://jhmartel.github.io/fp/2022/02/08/ClosingSteinbergGenusTwo.html",
            "relUrl": "/2022/02/08/ClosingSteinbergGenusTwo.html",
            "date": " • Feb 8, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jhmartel.github.io/fp/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jhmartel.github.io/fp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jhmartel.github.io/fp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jhmartel.github.io/fp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}